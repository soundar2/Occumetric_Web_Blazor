@page "/botReport/{JobId:int}"
@using Occumetric.Shared
@inject ICommonHttpService _commonHttpService
<img class="occ-logo" src="/images/occumetric-logo.png" alt="" />
<p class="date">
    @DateTime.UtcNow.ToString("MMM dd, yyyy")
</p>
<h3>
    Essential Functions - Physical Demand Assessment Report
</h3>

<div>
    <table class="job-header">
        <tbody>
            <tr>
                <td>Job Title / Position</td>
                <td>
                    @_jobViewModel.Name
                </td>
            </tr>
        </tbody>
    </table>
    <h3>
        Battery of Tests (Lifts Only)
    </h3>
    <table class="tasks">
        <thead>
            <tr>
                <th>
                    No.
                </th>
                <th>
                    Activity
                </th>
                <th>
                    Weight
                </th>
                <th>
                    Begin Lift
                </th>
                <th>
                    End Lift
                </th>
                <th>
                    Action
                </th>
                <th>
                    Lift Duration
                </th>
                <th>
                    Lift Frequency (over a 15 min period)
                </th>
            </tr>
        </thead>
        <tbody>
            @{
                int loopIndex = 1;
            }
            @foreach (var t in _jobTasks)
            {
                <tr>
                    <td>
                        @(loopIndex++)
                    </td>
                    <td>
                        @t.Name
                        <br />
                        @if (t.IsModifiedForBatteryOfTests)
                        {
                            <span>(modified)</span>
                        }
                        @if (t.IsSplitForBatteryOfTests)
                        {
                            <span>(split)</span>
                        }
                        @if (t.IsNewForBatteryOfTests)
                        {
                            <span>(new)</span>
                        }
                    </td>

                    <td>
                        @if (t.WeightLb > 0)
                        {
                            <span>@t.WeightLb</span> <span>lbs.</span>
                        }
                    </td>
                    <td>
                        @t.FromHeight
                    </td>
                    <td>
                        @t.ToHeight
                    </td>
                    <td>
                        @t.EffortType
                    </td>
                    <td>
                        @if (t.EffortType.Contains("Lift"))
                        {
                            <p>@t.LiftDurationType</p>
                        }
                    </td>
                    <td>
                        @if (t.EffortType.Contains("Lift"))
                        {
                            <p>@t.LiftFrequencyType</p>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public int JobId { get; set; }
    public List<JobTaskViewModel> _jobTasks = new List<JobTaskViewModel>();
    public JobViewModel _jobViewModel = new JobViewModel();
    protected async override void OnInitialized()
    {
        base.OnInitialized();
        await FetchData();

    }
    private async Task FetchData()
    {
        try
        {

            _jobViewModel = await _commonHttpService.GetGeneric<JobViewModel>($"/jobs/viewGet/{JobId}");
            _jobTasks = await _commonHttpService.GetGeneric<List<JobTaskViewModel>>($"/jobTasks/botReport/{JobId}");
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception");
            Console.WriteLine(e.Message);
        }
    }

    private DateTime PST_Time(DateTime utcTime)
    {
        string pstZoneId = "Pacific Standard Time";
        TimeZoneInfo pstZone = TimeZoneInfo.FindSystemTimeZoneById(pstZoneId);

        return TimeZoneInfo.ConvertTimeFromUtc(utcTime, pstZone);
    }
}
