@page "/taskCategories/create"
@using Occumetric.Shared
@inject HttpClient _httpClient
@inject ICommonHttpService _commonHttpService
<h3>Create New Task Category</h3>

<EditForm Model="_createTaskCategoryDto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="_createTaskCategoryDto.Name">Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="_createTaskCategoryDto.Name"></InputText>
            <ValidationMessage For="@(() => _createTaskCategoryDto.Name)" />
        </div>
    </div>
    <b>@_createdResult</b>
    <br />
    <b>@_errorMessage</b>
    <button class="btn btn-primary" type="submit">Save Changes</button>
</EditForm>
@code {
    private CreateTaskCategoryDto _createTaskCategoryDto = new CreateTaskCategoryDto();
    private string _createdResult = "";
    private string _errorMessage = "";
    private async void OnValidSubmit()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync(CommonHttpService.BaseUrl + "/taskCategories", _createTaskCategoryDto);
            Console.WriteLine("Success");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Success");
                var content = await response.Content.ReadFromJsonAsync<StringResult>();
                _createdResult = content.Result;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("failed");
                var content = await response.Content.ReadFromJsonAsync<ErrorResult>();
                _errorMessage = content.Result;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception");
            Console.WriteLine(e.Message);
            Console.WriteLine(e.InnerException.Message);
            _errorMessage = e.Message;
        }
        StateHasChanged();
    }

}
