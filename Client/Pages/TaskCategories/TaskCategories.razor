@page "/taskCategories/{IndustryId:int}"
@using Occumetric.Shared
@inject HttpClient _httpClient
@inject ICommonHttpService _commonHttpService
<h3>TaskCategorys</h3>

<p><b>@_errorMessage</b></p>
<a href="/taskCategories/create" class="btn btn-primary">Create TaskCategory</a>
<h3>Result</h3>
<button @onclick="FetchData">Fetch Data</button>
@if (_taskCategoryViewModels?.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Master Tasks</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in _taskCategoryViewModels)
            {
                <tr>
                    <td>
                        @item.Id
                    </td>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        <a href="/master-tasks">Master Tasks</a>
                    </td>
                    <td>
                        <a href="@($"/taskCategories/update/{item.Id}")" class="btn btn-primary">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>There are no records to show.</p>
}
@code {
    [Parameter] public int IndustryId { get; set; }
    private List<TaskCategoryViewModel> _taskCategoryViewModels { get; set; }
    private string _errorMessage = "";
    [CascadingParameter] Globals Globals { get; set; }

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        _taskCategoryViewModels = new List<TaskCategoryViewModel>();
        await FetchData();

    }
    private async Task FetchData()
    {
        try
        {
            Globals.IndustryId = IndustryId;
            _taskCategoryViewModels = await _commonHttpService.GetTaskCategories(IndustryId);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception");
            Console.WriteLine(e.Message);
            _errorMessage = e.Message;

        }
    }
}
