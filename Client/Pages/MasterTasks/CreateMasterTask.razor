@page "/masterTasks/create"
@using Occumetric.Shared
@using Occumetric.Client.Shared
@inject HttpClient _httpClient
@inject ICommonHttpService _commonHttpService
@inject IGlobalsService _globalsService
<h3>Create Master Task</h3>

<EditForm Model="_createMasterTaskDto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <table class="table table-striped">
        <tr>
            <td>
                Name:
            </td>
            <td>
                <InputText class="form-control required" @bind-Value="_createMasterTaskDto.Name"></InputText>
                <ValidationMessage For="@(() => _createMasterTaskDto.Name)" />
            </td>
        </tr>
        <tr>
            <td>
                Effort Type:
            </td>
            <td>
                <InputSelect class="form-control required" @bind-Value="@_createMasterTaskDto.EffortType" @onblur="CalculateNioshIndex">
                    @foreach (var item in _effortTypes)
                    {
                        <option value="@item.Type">@item.Type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _createMasterTaskDto.EffortType)" />
            </td>
        </tr>
        @if (_createMasterTaskDto.EffortType.Contains("Manual"))
        {
            <tr class="animate__animated animate__bounceInLeft ">
                <td>
                    Description (for Manual Tasks):
                </td>
                <td>
                    <InputText class="form-control required" @bind-Value="_createMasterTaskDto.ShortDescription"></InputText>
                </td>
            </tr>
        }
        <tr>
            <td>
                Weight to Lift:
            </td>
            <td>
                <input type="text" @bind-value="WtLb" @onblur="CalculateNioshIndex" />
                @*<InputNumber class="form-control required" @bind-Value="_weightLb"></InputNumber>*@
            </td>
        </tr>
        <tr>
            <td>
                Begin Lift:
            </td>
            <td>
                <InputText class="form-control" @bind-Value="_fromHeight" @onblur="CalculateNioshIndex"></InputText>
                <ValidationMessage For="@(() => _createMasterTaskDto.FromHeight)" />
            </td>
        </tr>
        <tr>
            <td>
                End Lift:
            </td>
            <td>
                <InputText class="form-control" @bind-Value="_toHeight" @onblur="CalculateNioshIndex"></InputText>
                <ValidationMessage For="@(() => _createMasterTaskDto.ToHeight)" />
            </td>
        </tr>
        @if (_createMasterTaskDto.EffortType.Contains("Lift") && WtLb > 0)
        {
            <tr>
                <td>
                    Niosh Index:
                </td>
                <td>
                    <NioshBadge NioshValue="_nioshIndex"></NioshBadge>
                </td>
            </tr>
            <tr>
                <td>
                    Snooks:
                </td>
                <td>
                    @_snooksViewModel.StrMalePercentage
                    <br />
                    @_snooksViewModel.StrFemalePercentage
                </td>
            </tr>
        }
    </table>

    <div class="form-group">
        <label>Assign To Industries:</label>
        <SelectIndustries SelectedIndustries="_selectedIndustries" OnSelectedIndustriesChanged="SelectedIndustriesChanged"></SelectIndustries>
    </div>
    <div class="form-group">
        <label>Assign To Categories:</label>
        <SelectCategories SelectedCategories="_selectedCategories" OnSelectedCategoriesChanged="SelectedCategoriesChanged"></SelectCategories>
    </div>

    <b>@_createdResult</b>
    <br />
    <b>@_errorMessage</b>
    <button class="btn btn-primary" type="submit">Save Changes</button>
</EditForm>
@code {
    private CreateMasterTaskDto _createMasterTaskDto = new CreateMasterTaskDto();
    private List<IndustryViewModel> _industries = new List<IndustryViewModel>();
    private List<TaskCategoryViewModel> _selectedCategories = new List<TaskCategoryViewModel>();
    private List<IndustryViewModel> _selectedIndustries = new List<IndustryViewModel>();
    private List<EffortTypeViewModel> _effortTypes = new List<EffortTypeViewModel>();
    private string _createdResult = "";
    private string _errorMessage = "error";

    //
    private async void OnValidSubmit()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/v1/masterTasks", _createMasterTaskDto);
            Console.WriteLine("Success");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Success");
                var content = await response.Content.ReadFromJsonAsync<StringResult>();
                _createdResult = content.Result;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("failed");
                var content = await response.Content.ReadFromJsonAsync<ErrorResult>();
                _errorMessage = content.Result;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception");
            Console.WriteLine(e.Message);
            Console.WriteLine(e.InnerException.Message);
            _errorMessage = e.Message;
        }
        StateHasChanged();
    }
    //
    protected async override void OnInitialized()
    {
        base.OnInitialized();
        _industries = await _commonHttpService.GetAllIndustries();
        _effortTypes = await _globalsService.GetEffortTypes();
        StateHasChanged();

    }
    //
    private void SelectedCategoriesChanged(List<TaskCategoryViewModel> items)
    {
        _selectedCategories = items;
    }
    //
    private void SelectedIndustriesChanged(List<IndustryViewModel> items)
    {
        _selectedIndustries = items;
    }
    //

    private int _wtLb = 20;
    private string _fromHeight = "30 inches";
    private string _toHeight = "40 inches";
    private double _nioshIndex = 0;
    private SnooksViewModel _snooksViewModel = new SnooksViewModel();
    public int WtLb
    {
        get { return _wtLb; }
        set
        {
            _wtLb = value;
            _createMasterTaskDto.WeightLb = _wtLb;
            CalculateNioshIndex();
        }

    }
    public string FromHeight
    {
        get { return _fromHeight; }
        set
        {
            _fromHeight = value;
            _createMasterTaskDto.FromHeight = _fromHeight;
            CalculateNioshIndex();
        }

    }
    public string ToHeight
    {
        get { return _toHeight; }
        set
        {
            _toHeight = value;
            _createMasterTaskDto.ToHeight = _toHeight;
            CalculateNioshIndex();
        }

    }
    private async void CalculateNioshIndex()
    {
        var nioshDto = new NioshCalculateDto
        {
            EffortType = _createMasterTaskDto.EffortType,
            WeightLb = _wtLb,
            FromHeight = Utility.SanitizeStringToInteger(_fromHeight),
            ToHeight = Utility.SanitizeStringToInteger(_toHeight)
        };
        _nioshIndex = await _commonHttpService.GetNioshIndex(nioshDto);
        //
        //also calculate snooks
        //
        await CalculateSnooks();
        StateHasChanged();
    }
    private async Task CalculateSnooks()
    {
        var snooksDto = new SnooksCalculateDto
        {
            EffortType = _createMasterTaskDto.EffortType,
            WeightLb = _wtLb,
            FromHeight = Utility.SanitizeStringToInteger(_fromHeight),
            ToHeight = Utility.SanitizeStringToInteger(_toHeight)
        };
        _snooksViewModel = await _commonHttpService.GetSnooksValues(snooksDto);
    }
}

<style>
    .required {
        box-shadow: 2px 2px 10px rgba(200, 0, 0, 0.85);
    }
</style>
