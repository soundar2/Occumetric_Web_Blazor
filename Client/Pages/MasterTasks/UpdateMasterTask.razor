@page "/masterTasks/update/{MasterTaskId:int}"
@using Occumetric.Shared
@using Occumetric.Client.Shared
@inject HttpClient _httpClient
@inject ICommonHttpService _commonHttpService
@inject IGlobalsService _globalsService
@inject NavigationManager _navigationManager
<h3>Update Master Task</h3>

<EditForm Model="_updateMasterTaskDto" OnValidSubmit="OnValidSubmit">
    <input type="hidden" value="@_updateMasterTaskDto.Id" />
    <DataAnnotationsValidator />
    <table class="table table-striped">
        <tr>
            <td>
                Name:
            </td>
            <td>
                <InputText class="form-control required" @bind-Value="_updateMasterTaskDto.Name"></InputText>
                <ValidationMessage For="@(() => _updateMasterTaskDto.Name)" />
            </td>
        </tr>
        <tr>
            <td>
                Effort Type:
            </td>
            <td>
                <InputSelect class="form-control required" @bind-Value="@_updateMasterTaskDto.EffortType" @onblur="CalculateNioshIndex">
                    @foreach (var item in _effortTypes)
                    {
                        <option value="@item.Type">@item.Type</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _updateMasterTaskDto.EffortType)" />
            </td>
        </tr>
        @if (_updateMasterTaskDto.EffortType.Contains("Manual"))
        {
            <tr class="animate__animated animate__bounceInLeft ">
                <td>
                    Description (for Manual Tasks):
                </td>
                <td>
                    <InputText class="form-control required" @bind-Value="_updateMasterTaskDto.ShortDescription"></InputText>
                </td>
            </tr>
        }
        <tr>
            <td>
                Weight to Lift:
            </td>
            <td>
                <input type="text" @bind-value="WtLb" @onblur="CalculateNioshIndex" />
                @*<InputNumber class="form-control required" @bind-Value="_weightLb"></InputNumber>*@
            </td>
        </tr>
        <tr>
            <td>
                Begin Lift:
            </td>
            <td>
                <InputText class="form-control" @bind-Value="FromHeight" @onblur="CalculateNioshIndex"></InputText>
                <ValidationMessage For="@(() => _updateMasterTaskDto.FromHeight)" />
            </td>
        </tr>
        <tr>
            <td>
                End Lift:
            </td>
            <td>
                <InputText class="form-control" @bind-Value="ToHeight" @onblur="CalculateNioshIndex"></InputText>
                <ValidationMessage For="@(() => _updateMasterTaskDto.ToHeight)" />
            </td>
        </tr>
        @if (_updateMasterTaskDto.EffortType.Contains("Lift") && WtLb > 0)
        {
            <tr>
                <td>
                    Niosh Index:
                </td>
                <td>
                    <NioshBadge NioshValue="_nioshIndex"></NioshBadge>
                </td>
            </tr>
            <tr>
                <td>
                    Snooks:
                </td>
                <td>
                    <SnooksGraph SnooksViewModel="_snooksViewModel"></SnooksGraph>
                </td>
            </tr>
        }
    </table>

    <div class="form-group">
        <label>Assign To Categories:</label>
        <SelectCategories SelectedCategories="_selectedCategories" OnSelectedCategoriesChanged="SelectedCategoriesChanged"></SelectCategories>
    </div>

    <b>@_updatedResult</b>
    <br />
    <b>@_errorMessage</b>
    <button class="btn btn-primary" type="submit">Save Changes</button>
</EditForm>
@code {
    [Parameter] public int MasterTaskId { get; set; }
    public int _masterTaskId { get; set; }
    private UpdateMasterTaskDto _updateMasterTaskDto = new UpdateMasterTaskDto();
    private List<TaskCategoryViewModel> _selectedCategories = new List<TaskCategoryViewModel>();
    private List<EffortTypeViewModel> _effortTypes = new List<EffortTypeViewModel>();
    private string _updatedResult = "";
    private string _errorMessage = "error";

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        _masterTaskId = MasterTaskId;

        _effortTypes = await _globalsService.GetEffortTypes();
        _updateMasterTaskDto = await _commonHttpService.GetGeneric<UpdateMasterTaskDto>($"api/v1/masterTasks/forUpdate/{MasterTaskId}");
        _selectedCategories.AddRange(_updateMasterTaskDto.TaskCategoryViewModels);
        StateHasChanged();

    }

    private async void OnValidSubmit()
    {
        try
        {
            var response = await _httpClient.PutAsJsonAsync("api/v1/masterTasks", _updateMasterTaskDto);
            Console.WriteLine("Success");
            if (response.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo($"masterTasks/industry/39");
            }
            else
            {
                Console.WriteLine("failed");
                var content = await response.Content.ReadFromJsonAsync<ErrorResult>();
                _errorMessage = content.Result;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception");
            Console.WriteLine(e.Message);
            Console.WriteLine(e.InnerException.Message);
            _errorMessage = e.Message;
        }
        StateHasChanged();
    }
    //

    private void SelectedCategoriesChanged(List<TaskCategoryViewModel> items)
    {
        _updateMasterTaskDto.TaskCategoryViewModels.Clear();
        _updateMasterTaskDto.TaskCategoryViewModels.AddRange(items);
        _selectedCategories = _updateMasterTaskDto.TaskCategoryViewModels;
    }

    //

    private double _nioshIndex = 0;
    private SnooksViewModel _snooksViewModel = new SnooksViewModel();
    public int WtLb
    {
        get { return (int)_updateMasterTaskDto.WeightLb; }
        set
        {
            _updateMasterTaskDto.WeightLb = value;
            CalculateNioshIndex();
        }

    }
    public string FromHeight
    {
        get { return _updateMasterTaskDto.FromHeight; }
        set
        {
            _updateMasterTaskDto.FromHeight = value;
            CalculateNioshIndex();
        }

    }
    public string ToHeight
    {
        get { return _updateMasterTaskDto.ToHeight; }
        set
        {
            _updateMasterTaskDto.ToHeight = value;
            CalculateNioshIndex();
        }

    }
    private async void CalculateNioshIndex()
    {
        if (!IsValidForNiosh()) return;
        var nioshDto = new NioshCalculateDto
        {
            EffortType = _updateMasterTaskDto.EffortType,
            WeightLb = (int)_updateMasterTaskDto.WeightLb,
            FromHeight = Utility.SanitizeStringToInteger(_updateMasterTaskDto.FromHeight),
            ToHeight = Utility.SanitizeStringToInteger(_updateMasterTaskDto.ToHeight)
        };
        _nioshIndex = await _commonHttpService.GetNioshIndex(nioshDto);
        //
        //also calculate snooks
        //
        await CalculateSnooks();
        StateHasChanged();
    }
    private async Task CalculateSnooks()
    {
        if (!IsValidForNiosh()) return;
        var snooksDto = new SnooksCalculateDto
        {
            EffortType = _updateMasterTaskDto.EffortType,
            WeightLb = (int)_updateMasterTaskDto.WeightLb,
            FromHeight = Utility.SanitizeStringToInteger(_updateMasterTaskDto.FromHeight),
            ToHeight = Utility.SanitizeStringToInteger(_updateMasterTaskDto.ToHeight)
        };
        _snooksViewModel = await _commonHttpService.GetSnooksValues(snooksDto);
    }

    private bool IsValidForNiosh()
    {
        return (_updateMasterTaskDto.EffortType.Contains("Lift") && (int)_updateMasterTaskDto.WeightLb > 0);
    }
}

<style>
    .required {
        box-shadow: 2px 2px 10px rgba(200, 0, 0, 0.85);
    }
</style>
