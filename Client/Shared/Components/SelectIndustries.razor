@using Occumetric.Shared
@inject ICommonHttpService _commonHttpService
<table>
    <tr>
        <td>
            <div class="left-list">
                @foreach (var item in _leftList)
                {
                    <div class="checkbox">
                        <label>
                            <input type="checkbox" @bind="item.IsChecked" />
                        </label>
                        @item.Name
                    </div>
                }
            </div>
        </td>
        <td>
            <button @onclick="MoveRightClicked" @onclick:preventDefault="true">Move Right</button>
            <br />
            <button @onclick="DeleteRightClicked" @onclick:preventDefault="true">Delete</button>
        </td>
        <td>
            @foreach (var item in _rightList)
            {
                <div class="checkbox">
                    <label>
                        <input type="checkbox" @bind="item.IsChecked" />
                    </label>
                    @item.Name
                </div>
            }
        </td>
    </tr>
</table>

@code {
    [Parameter] public List<IndustryViewModel> SelectedIndustries { get; set; } = new List<IndustryViewModel>();
    private List<IndustryViewModel> _leftList = new List<IndustryViewModel>();
    private List<IndustryViewModel> _rightList = new List<IndustryViewModel>();
    [Parameter] public EventCallback<List<IndustryViewModel>> OnSelectedIndustriesChanged { get; set; }

    //

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        _leftList = await _commonHttpService.GetAllIndustries();
        StateHasChanged();

    }
    protected async Task MoveRightClicked()
    {
        var leftIds = (from item in _leftList where item.IsChecked select item.Id).ToList();
        var rightIds = (from item in _rightList select item.Id).ToList();
        var idsToMove = leftIds.Except(rightIds);
        foreach (var id in idsToMove)
        {
            var item = (IndustryViewModel)_leftList.Where(x => x.Id == id).Select(x => x).Single().Clone();
            item.IsChecked = false;
            _rightList.Add(item);
        }

        await SetSelectedIndustries();
    }
    protected async Task DeleteRightClicked()
    {
        _rightList.RemoveAll(x => x.IsChecked);
        await SetSelectedIndustries();
    }
    private async Task SetSelectedIndustries()
    {
        await OnSelectedIndustriesChanged.InvokeAsync(_rightList);
    }

}
